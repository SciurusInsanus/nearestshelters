import React, { useState } from "react";

const haversineDistance = ([lat1, lon1], [lat2, lon2]) => {
  const toRad = (val) => (val * Math.PI) / 180;
  const R = 6371; // –†–∞–¥–∏—É—Å –ó–µ–º–ª–∏ –≤ –∫–∏–ª–æ–º–µ—Ç—Ä–∞—Ö
  const dLat = toRad(lat2 - lat1);
  const dLon = toRad(lon2 - lon1);
  const a =
    Math.sin(dLat / 2) ** 2 +
    Math.cos(toRad(lat1)) * Math.cos(toRad(lat2)) * Math.sin(dLon / 2) ** 2;
  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
  return R * c; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –≤ –∫–∏–ª–æ–º–µ—Ç—Ä–∞—Ö
};

// –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –≤ –∞–¥—Ä–µ—Å–∞—Ö –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç—Å—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
const fetchCoords = async (address) => {
  const apiKey = "74796fe5-c44e-403a-b715-a6e954b3118e"; // üîë –í—Å—Ç–∞–≤—å—Ç–µ —Å—é–¥–∞ —Å–≤–æ–π API-–∫–ª—é—á
  const url = `https://geocode-maps.yandex.ru/1.x/?format=json&apikey=${apiKey}&geocode=${encodeURIComponent(address)}, –ú–æ—Å–∫–≤–∞`;
  const res = await fetch(url);
  const data = await res.json();
  
  if (!data.response.GeoObjectCollection.featureMember.length) {
    throw new Error('–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
  }

  const pos = data.response.GeoObjectCollection.featureMember[0].GeoObject.Point.pos;
  const [lon, lat] = pos.split(" ").map(Number);
  
  // –í—ã–≤–µ–¥–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
  console.log(`–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è –∞–¥—Ä–µ—Å–∞ "${address}":`, lat, lon);

  return [lat, lon];
};

const ShelterSearch = () => {
  const [station, setStation] = useState("");
  const [result, setResult] = useState(null);
  const [loading, setLoading] = useState(false);

  const shelters = [
    { name: "–ê–π–∫–∞", address: "–ú–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª., –†—É–∑—Å–∫–∏–π —Ä-–æ–Ω, –ø–æ—Å. –ë–æ—Ä–æ–¥–µ–Ω–∫–∏, —É–ª. –°–æ—Å–Ω–æ–≤–∞—è, –¥.24" },
    { name: "–ë–µ–ª–æ–ü–µ—Å", address: "–ú–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å –õ—É—Ö–æ–≤–∏—Ü–∫–∏–π –æ–∫—Ä—É–≥, –ø–æ—Å—ë–ª–æ–∫ –ë–µ–ª–æ–æ–º—É—Ç, –°–ù–¢ –ó–≤–µ–∑–¥–∞, 62 —É—á–∞—Å—Ç–æ–∫" },
    { name: "–ë–µ—Ä–∏–≥–∏–Ω—è", address: "–≥.–æ. –ù–∞—Ä–æ-–§–æ–º–∏–Ω—Å–∫–∏–π, –¥. –°–∫—É–≥–æ—Ä–æ–≤–æ, —É–ª. –î–∞—á–Ω–∞—è, 21. –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: 55.479413, 36.509892" },
    { name: "–ë–∏–æ–∑–æ–Ω–∞", address: "–ø–≥—Ç –ë–µ–ª–æ–æ–∑–µ—Ä—Å–∫–∏–π, –í–æ—Å–∫—Ä–µ—Å–µ–Ω—Å–∫–∏–π —Ä–∞–π–æ–Ω –ú–æ—Å–∫–æ–≤—Å–∫–æ–π –æ–±–ª–∞—Å—Ç–∏, —É–ª. –ö–æ–º–º—É–Ω–∞–ª—å–Ω–∞—è, –¥.7" },
    { name: "–ë–∏—Ä—é–ª–µ–≤–æ", address: "–í–æ—Å—Ç—Ä—è–∫–æ–≤—Å–∫–∏–π –ø—Ä-–¥, –≤–ª. 10–ê" },
    { name: "–¢–∞—Ç—å—è–Ω–∞ –ë—É—Ä–¥–æ–≤–∞", address: "–¢—É–ª—å—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å, –ó–∞–æ–∫—Å–∫–∏–π —Ä-–Ω, –¥. –ñ–µ–ª–µ–∑–Ω—è, —É—á. 101. (–î–ª—è –Ω–∞–≤–∏–≥–∞—Ç–æ—Ä–∞ - –¥–æ–º 95)" },
    { name: "–í–µ—Ä–Ω—ã–µ –¥—Ä—É–∑—å—è", address: "–≥.–ö–∞–ª—É–≥–∞ —É–ª.–ê–∑–∞—Ä–æ–≤—Å–∫–∞—è –¥.46 –∫.2." },
    { name: "–í–æ–ª–æ–Ω—Ç–µ—Ä—ã –û–¥–∏–Ω—Ü–æ–≤–æ", address: "–ú–æ—Å–∫–≤–∞" }, // –ü—Ä–∏–º–µ—Ä, —É–∫–∞–∂–∏—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    // –î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ –ø—Ä–∏—é—Ç—ã...
  ];

  const handleSearch = async () => {
    setLoading(true);
    try {
      // –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Å—Ç–∞–Ω—Ü–∏–∏
      const stationCoords = await fetchCoords(station);

      // –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏—é—Ç–∞ –∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
      const distances = await Promise.all(
        shelters.map(async (shelter) => {
          const shelterCoords = await fetchCoords(shelter.address);
          return {
            ...shelter,
            distance: haversineDistance(stationCoords, shelterCoords),
          };
        })
      );

      // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø—Ä–∏—é—Ç—ã –ø–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—é
      const sorted = distances.sort((a, b) => a.distance - b.distance);

      // –í—ã–≤–æ–¥–∏–º –≤—Å–µ –ø—Ä–∏—é—Ç—ã —Å —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è–º–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
      console.log('–í—Å–µ –ø—Ä–∏—é—Ç—ã —Å —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è–º–∏:', sorted);

      let nearestShelters;
      if (sorted[0].distance <= 1.5) {
        nearestShelters = [sorted[0]]; // –ü–æ–∫–∞–∑–∞—Ç—å –±–ª–∏–∂–∞–π—à–∏–π –ø—Ä–∏—é—Ç
      } else {
        nearestShelters = sorted.slice(0, 2); // –ú–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏—é—Ç–æ–≤, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å
      }

      setResult({ nearestShelters, stationCoords });
    } catch (e) {
      alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–∏ –∞–¥—Ä–µ—Å–æ–≤.");
      console.error(e);
    }
    setLoading(false);
  };

  return (
    <div>
      <h1>–ü–æ–∏—Å–∫ –±–ª–∏–∂–∞–π—à–∏—Ö –ø—Ä–∏—é—Ç–æ–≤</h1>
      <div>
        <label>
          –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å —Å—Ç–∞–Ω—Ü–∏–∏ –º–µ—Ç—Ä–æ –∏–ª–∏ –Ω–∞—Å–µ–ª—ë–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞:
          <input
            type="text"
            value={station}
            onChange={(e) => setStation(e.target.value)}
          />
        </label>
        <button onClick={handleSearch} disabled={loading}>
          {loading ? "–ó–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è..." : "–ù–∞–π—Ç–∏ –ø—Ä–∏—é—Ç—ã"}
        </button>
      </div>

      {result && (
        <div>
          <h2>–ë–ª–∏–∂–∞–π—à–∏–µ –ø—Ä–∏—é—Ç—ã:</h2>
          <ul>
            {result.nearestShelters.map((shelter, index) => (
              <li key={index}>
                <strong>{shelter.name}</strong>
                <br />
                –ê–¥—Ä–µ—Å: {shelter.address}
                <br />
                –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {shelter.distance.toFixed(2)} –∫–º
              </li>
            ))}
          </ul>
        </div>
      )}
    </div>
  );
};

export default ShelterSearch;
